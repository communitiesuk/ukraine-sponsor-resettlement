const errors = require('../../../fixtures/eoi_bodytext_errors.json')
const texts = require('../../../fixtures/eoi_bodytext.json')
const secrets = require('../../../fixtures/eoi_bodytext_secrets.json')
const elements = require('../../page_elements/EOI/eoi_elements')

describe('[Frontend-UI]: EOI ADDRESS', function () {
  context('Residential Address', function () {
    beforeEach(function () {
      cy.visit('/expression-of-interest/steps/4')
    })
    it('has the expected page heading', function () {
      cy.get(elements.page_heading).contains(texts.res_address_heading).should('be.visible')
    })
    it('shows three validation errors when residential address is empty', function () {
      cy.get(elements.continue_button).click()
      cy.get(elements.addressl1_error_label).contains(errors.addl1_err_msg).should('be.visible')
      cy.get(elements.townorcity_error_label).contains(errors.townorcity_err_msg).should('be.visible')
      cy.get(elements.postcode_error_label).contains(errors.postcode_err_msg).should('be.visible')
    })
    it('shows three validation errors when residential address is filled with single characters', function () {
      cy.get(elements.addressl1_textbox).type('A')
      cy.get(elements.townorcity_textbox).type('B')
      cy.get(elements.postcode_textbox).type('C')
      cy.get(elements.continue_button).click()
      cy.get(elements.addressl1_error_label).contains(errors.addl1_err_msg).should('be.visible')
      cy.get(elements.townorcity_error_label).contains(errors.townorcity_err_msg).should('be.visible')
      cy.get(elements.postcode_error_label).contains(errors.postcode_err_msg).should('be.visible')
    })
    it('shows three validation errors when residential address is filled with two characters', function () {
      cy.get(elements.addressl1_textbox).type('@1')
      cy.get(elements.townorcity_textbox).type('2*')
      cy.get(elements.postcode_textbox).type('3^')
      cy.get(elements.continue_button).click()
      cy.get(elements.addressl1_error_label).contains(errors.addl1_err_msg).should('be.visible')
      cy.get(elements.townorcity_error_label).contains(errors.townorcity_err_msg).should('be.visible')
      cy.get(elements.postcode_error_label).contains(errors.postcode_err_msg).should('be.visible')
    })
    it('shows two validation errors when only address line 1 is filled', function () {
      cy.get(elements.addressl1_textbox).type(secrets.building_no)
      cy.get(elements.continue_button).click()
      cy.get(elements.addressl1_error_label).should('not.exist')
      cy.get(elements.townorcity_error_label).contains(errors.townorcity_err_msg).should('be.visible')
      cy.get(elements.postcode_error_label).contains(errors.postcode_err_msg).should('be.visible')
    })
    it('shows two validation errors when only town/city is filled', function () {
      cy.get(elements.townorcity_textbox).type(secrets.city)
      cy.get(elements.continue_button).click()
      cy.get(elements.addressl1_error_label).contains(errors.addl1_err_msg).should('be.visible')
      cy.get(elements.townorcity_error_label).should('not.exist')
      cy.get(elements.postcode_error_label).contains(errors.postcode_err_msg).should('be.visible')
    })
    it('shows two validation errors when only postcode is filled', function () {
      cy.get(elements.postcode_textbox).type(secrets.postcode)
      cy.get(elements.continue_button).click()
      cy.get(elements.addressl1_error_label).contains(errors.addl1_err_msg).should('be.visible')
      cy.get(elements.townorcity_error_label).contains(errors.townorcity_err_msg).should('be.visible')
      cy.get(elements.postcode_error_label).should('not.exist')
    })
    it('shows a validation error when the address is filled and postcode is invalid', function () {
      cy.get(elements.addressl1_textbox).type(secrets.building_no)
      cy.get(elements.townorcity_textbox).type(secrets.city)
      cy.get(elements.postcode_textbox).clear().type("NW10")
      cy.get(elements.continue_button).click()
      cy.get(elements.addressl1_error_label).should('not.exist')
      cy.get(elements.townorcity_error_label).should('not.exist')
      cy.get(elements.postcode_error_label).contains(errors.postcode_err_msg).should('be.visible')
    })
    it('shows a validation error when the address is filled and town/city is invalid', function () {
      cy.get(elements.addressl1_textbox).type(secrets.building_no)
      cy.get(elements.townorcity_textbox).type('$$')
      cy.get(elements.postcode_textbox).type(secrets.postcode)
      cy.get(elements.continue_button).click()
      cy.get(elements.addressl1_error_label).should('not.exist')
      cy.get(elements.townorcity_error_label).contains(errors.townorcity_err_msg).should('be.visible')
      cy.get(elements.postcode_error).should('not.exist')
    })
    it('shows a validation error when the address is filled and address line 1 is invalid', function () {
      cy.get(elements.addressl1_textbox).type('!!')
      cy.get(elements.townorcity_textbox).type(secrets.city)
      cy.get(elements.postcode_textbox).type(secrets.postcode)
      cy.get(elements.continue_button).click()
      cy.get(elements.addressl1_error_label).contains(errors.addl1_err_msg).should('be.visible')
      cy.get(elements.townorcity_error_label).should('not.exist')
      cy.get(elements.postcode_error_label).should('not.exist')
    })
    it('shows the next page questions when the address is filled and valid', function () {
      cy.get(elements.addressl1_textbox).type(secrets.building_no)
      cy.get(elements.addressl2_textbox).type(secrets.street)
      cy.get(elements.townorcity_textbox).type(secrets.city)
      cy.get(elements.postcode_textbox).type(secrets.postcode)
      cy.get(elements.continue_button).click()
      cy.get(elements.addressl1_error_label).should('not.exist')
      cy.get(elements.townorcity_error_label).should('not.exist')
      cy.get(elements.postcode_error_label).should('not.exist')
      cy.get(elements.page_heading).contains(texts.dif_address_heading).should('be.visible')
    })
  })

  context('Offering Property Address', function () {
    beforeEach(function () {
      cy.visit('/expression-of-interest/steps/6')
    })
    it('has the expected page heading', function () {
      cy.get(elements.page_heading).contains(texts.off_address_heading).should('be.visible')
    })
    it('shows three validation errors when offering property address is empty', function () {
      cy.get(elements.continue_button).click()
      cy.get(elements.offering_addressl1_error_label).contains(errors.addl1_err_msg).should('be.visible')
      cy.get(elements.offering_townorcity_error_label).contains(errors.townorcity_err_msg).should('be.visible')
      cy.get(elements.offering_postcode_error_label).contains(errors.postcode_err_msg).should('be.visible')
    })
    it('shows three validation errors when offering property address is filled with single characters', function () {
      cy.get(elements.offering_addressl1_textbox).type('A')
      cy.get(elements.offering_townorcity_textbox).type('B')
      cy.get(elements.offering_postcode_textbox).type("C")
      cy.get(elements.continue_button).click()
      cy.get(elements.offering_addressl1_error_label).contains(errors.addl1_err_msg).should('be.visible')
      cy.get(elements.offering_townorcity_error_label).contains(errors.townorcity_err_msg).should('be.visible')
      cy.get(elements.offering_postcode_error_label).contains(errors.postcode_err_msg).should('be.visible')
    })
    it('shows three validation errors when offering property address is filled with two characters', function () {
      cy.get(elements.offering_addressl1_textbox).type('@!')
      cy.get(elements.offering_townorcity_textbox).type('*Â£')
      cy.get(elements.offering_postcode_textbox).type("12")
      cy.get(elements.continue_button).click()
      cy.get(elements.offering_addressl1_error_label).contains(errors.addl1_err_msg).should('be.visible')
      cy.get(elements.offering_townorcity_error_label).contains(errors.townorcity_err_msg).should('be.visible')
      cy.get(elements.offering_postcode_error_label).contains(errors.postcode_err_msg).should('be.visible')
    })
    it('shows two validation errors when only address line 1 is filled', function () {
      cy.get(elements.offering_addressl1_textbox).type(secrets.building_no)
      cy.get(elements.continue_button).click()
      cy.get(elements.offering_addressl1_error_label).should('not.exist')
      cy.get(elements.offering_townorcity_error_label).contains(errors.townorcity_err_msg).should('be.visible')
      cy.get(elements.offering_postcode_error_label).contains(errors.postcode_err_msg).should('be.visible')
    })
    it('shows two validation errors when only town/city is filled', function () {
      cy.get(elements.offering_townorcity_textbox).type(secrets.city)
      cy.get(elements.continue_button).click()
      cy.get(elements.offering_addressl1_error_label).contains(errors.addl1_err_msg).should('be.visible')
      cy.get(elements.offering_townorcity_error_label).should('not.exist')
      cy.get(elements.offering_postcode_error_label).contains(errors.postcode_err_msg).should('be.visible')
    })
    it('shows two validation errors when only postcode is filled', function () {
      cy.get(elements.offering_postcode_textbox).type(secrets.postcode)
      cy.get(elements.continue_button).click()
      cy.get(elements.offering_addressl1_error_label).contains(errors.addl1_err_msg).should('be.visible')
      cy.get(elements.offering_townorcity_error_label).contains(errors.townorcity_err_msg).should('be.visible')
      cy.get(elements.offering_postcode_error_label).should('not.exist')
    })
    it('shows a validation error when the address is filled and postcode is invalid', function () {
      cy.get(elements.offering_addressl1_textbox).type(secrets.building_no)
      cy.get(elements.offering_townorcity_textbox).type(secrets.city)
      cy.get(elements.offering_postcode_textbox).type('NW10')
      cy.get(elements.continue_button).click()
      cy.get(elements.offering_addressl1_error_label).should('not.exist')
      cy.get(elements.offering_townorcity_error_label).should('not.exist')
      cy.get(elements.offering_postcode_error_label).contains(errors.postcode_err_msg).should('be.visible')
    })
    it('shows a validation error when the address is filled and town/city is invalid', function () {
      cy.get(elements.offering_addressl1_textbox).type(secrets.building_no)
      cy.get(elements.offering_townorcity_textbox).type('$$')
      cy.get(elements.offering_postcode_textbox).type(secrets.postcode)
      cy.get(elements.continue_button).click()
      cy.get(elements.offering_addressl1_error_label).should('not.exist')
      cy.get(elements.offering_townorcity_error_label).contains(errors.townorcity_err_msg).should('be.visible')
    })
    it('shows a validation error when the address is filled and address line 1 is invalid', function () {
      cy.get(elements.offering_addressl1_textbox).type('!!')
      cy.get(elements.offering_townorcity_textbox).type(secrets.city)
      cy.get(elements.offering_postcode_textbox).type(secrets.postcode)
      cy.get(elements.continue_button).click()
      cy.get(elements.offering_addressl1_error_label).contains(errors.addl1_err_msg).should('be.visible')
      cy.get(elements.offering_townorcity_error_label).should('not.exist')
      cy.get(elements.offering_postcode_error_label).should('not.exist')
    })
    it('shows the next page questions when the address is filled and valid', function () {
      cy.get(elements.offering_addressl1_textbox).type(secrets.building_no)
      cy.get(elements.offering_addressl2_textbox).type(secrets.street)
      cy.get(elements.offering_townorcity_textbox).type(secrets.city)
      cy.get(elements.offering_postcode_textbox).type(secrets.postcode)
      cy.get(elements.continue_button).click()
      cy.get(elements.offering_addressl1_error_label).should('not.exist')
      cy.get(elements.offering_townorcity_error_label).should('not.exist')
      cy.get(elements.offering_postcode_error_label).should('not.exist')
      cy.get(elements.page_heading).contains(texts.new_property_heading).should('be.visible')
    })
  })
})